//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::{EntityTrait, NotSet};
use sea_orm::ActiveValue::Set;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Deserialize, Serialize)]
#[sea_orm(
rs_type = "String",
db_type = "String(Some(10))",
enum_name = "execution_kind"
)]
pub enum ExecutionKind {
    #[sea_orm(string_value = "Scheduled")]
    #[serde(rename = "Scheduled")]
    Scheduled,
    #[sea_orm(string_value = "Trigger")]
    #[serde(rename = "Trigger")]
    Trigger,
}

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Deserialize, Serialize)]
#[sea_orm(
rs_type = "String",
db_type = "String(Some(10))",
enum_name = "execution_type"
)]
pub enum ExecutionType {
    #[sea_orm(string_value = "TestCase")]
    #[serde(rename = "TestCase")]
    TestCase,
    #[sea_orm(string_value = "TestSuite")]
    #[serde(rename = "TestSuite")]
    TestSuite,
}

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Deserialize, Serialize)]
#[sea_orm(
rs_type = "String",
db_type = "String(Some(10))",
enum_name = "execution_status"
)]
pub enum ExecutionStatus {
    #[sea_orm(string_value = "Started")]
    #[serde(rename = "Started")]
    Started,
    #[sea_orm(string_value = "Running")]
    #[serde(rename = "Running")]
    Running,
    #[sea_orm(string_value = "Completed")]
    #[serde(rename = "Completed")]
    Completed,
    #[sea_orm(string_value = "Failed")]
    #[serde(rename = "Failed")]
    Failed,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "execution_request")]
pub struct Model {
    #[serde(skip_deserializing)]
    #[sea_orm(primary_key)]
    pub id: i32,
    pub description: Option<String>,
    pub is_dry_run: bool,
    pub ref_id: Uuid,
    pub ref_type: ExecutionType,

    pub kind: ExecutionKind,
    pub status: ExecutionStatus,
    pub args: Option<serde_json::Value>,

    pub log_id: i32,
    pub created_at: DateTimeWithTimeZone,
    pub created_by: String,
    pub finished_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

pub fn new(
    ref_id: Uuid,
    ref_type: ExecutionType,
    kind: ExecutionKind,
    status: ExecutionStatus,
    log_id: i32,
    is_dry_run: bool,
    desc: Option<String>,
) -> ActiveModel {
    ActiveModel {
        id: Default::default(),
        description: Set(desc),
        is_dry_run: Set(is_dry_run),
        ref_id: Set(ref_id),
        ref_type: Set(ref_type),
        kind: Set(kind),
        status: Set(status),
        args: NotSet,
        log_id: Set(log_id),
        created_at: Set(chrono::Utc::now().into()),
        created_by: Set("System".to_string()),
        finished_at: Set(chrono::Utc::now().into()),
        updated_at: Set(chrono::Utc::now().into()),
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}


impl ActiveModelBehavior for ActiveModel {}
