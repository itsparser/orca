//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::ActiveValue::Set;
use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Deserialize, Serialize)]
#[sea_orm(rs_type = "String", db_type = "String(Some(5))", enum_name = "item_log_status")]
pub enum ItemLogStatus {
    #[sea_orm(string_value = "SUCC")]
    #[serde(rename = "Scheduled")]
    Success,
    #[sea_orm(string_value = "FAIL")]
    #[serde(rename = "Trigger")]
    Failed,
    #[sea_orm(string_value = "SKIP")]
    #[serde(rename = "Skipped")]
    Skipped,
    #[sea_orm(string_value = "RUN")]
    #[serde(rename = "Running")]
    Running,
}

#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum, Deserialize, Serialize)]
#[sea_orm(rs_type = "String", db_type = "String(Some(5))", enum_name = "item_log_type")]
pub enum ItemLogType {
    #[sea_orm(string_value = "A")]
    #[serde(rename = "Action")]
    Action,
    #[sea_orm(string_value = "AG")]
    #[serde(rename = "ActionGroup")]
    ActionGroup,
    #[sea_orm(string_value = "AS")]
    #[serde(rename = "Assertion")]
    Assertion,
    #[sea_orm(string_value = "TC")]
    #[serde(rename = "TestCase")]
    TestCase,
    #[sea_orm(string_value = "TS")]
    #[serde(rename = "TestSuite")]
    TestSuite,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "item_log")]
pub struct Model {
    #[serde(skip_deserializing)]
    #[sea_orm(primary_key)]
    pub id: i32,
    pub ref_id: i32,
    pub ref_type: ItemLogType,

    pub step_id: Uuid,
    pub has_screenshot: bool,
    pub has_recording: bool,
    pub execution_time: i32,
    pub status: ItemLogStatus,
    pub log_id: Option<i32>,
    pub created_at: DateTimeWithTimeZone,
    pub created_by: String,
    pub finished_at: DateTimeWithTimeZone,
}

impl ActiveModel {
    pub fn new(ref_id: i32, ref_type: ItemLogType, step_id: Uuid, log_id: Option<i32>) -> ActiveModel {
        ActiveModel {
            id: Default::default(),
            ref_id: Set(ref_id),
            ref_type: Set(ref_type),
            step_id: Set(step_id),
            has_screenshot: Set(false),
            has_recording: Set(false),
            execution_time: Set(0),
            status: Set(ItemLogStatus::Running),
            log_id: Set(log_id),
            created_at: Set(chrono::Utc::now().into()),
            created_by: Set("System".to_string()),
            finished_at: Set(chrono::Utc::now().into()),
        }
    }
}

pub fn new(ref_id: i32, ref_type: ItemLogType, step_id: Uuid, log_id: Option<i32>) -> ActiveModel {
    ActiveModel {
        id: Default::default(),
        ref_id: Set(ref_id),
        ref_type: Set(ref_type),
        step_id: Set(step_id),
        has_screenshot: Set(false),
        has_recording: Set(false),
        execution_time: Set(0),
        status: Set(ItemLogStatus::Running),
        log_id: Set(log_id),
        created_at: Set(chrono::Utc::now().into()),
        created_by: Set("System".to_string()),
        finished_at: Set(chrono::Utc::now().into()),
    }
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(belongs_to = "Entity", from = "Column::Id", to = "Column::LogId")]
    SelfReferencing,
}

impl ActiveModelBehavior for ActiveModel {}

pub struct SelfReferencingLink;

impl Linked for SelfReferencingLink {
    type FromEntity = Entity;

    type ToEntity = Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::SelfReferencing.def()]
    }
}

