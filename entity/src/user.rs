//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
use sea_orm::Set;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct User {
    pub id: Option<i32>,
    pub first_name: String,
    pub last_name: Option<String>,
    pub name: String,
    pub email: String,
    pub is_active: Option<bool>,
}

impl User {
    pub fn to_active_model(&self) -> ActiveModel {
        let user_response = ActiveModel {
            first_name: Set(self.first_name.to_owned()),
            last_name: Set(self.last_name.to_owned()),
            email: Set(self.email.to_owned()),
            name: Set(self.name.to_owned()),
            is_active: Set(self.is_active.to_owned().or(Some(false)).unwrap()),
            ..Default::default()
        };
        return user_response;
    }
    pub fn from_active_model(mut am: ActiveModel) -> Self {
        Self {
            id: Some(am.id.take().unwrap()),
            first_name: am.first_name.take().unwrap(),
            last_name: None,
            name: am.name.take().unwrap(),
            email: am.email.take().unwrap(),
            is_active: None,
        }
    }
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    pub first_name: String,
    pub last_name: Option<String>,
    pub name: String,
    pub email: String,
    pub password: Option<String>,
    pub is_active: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_group::Entity")]
    UserGroup,
    #[sea_orm(has_many = "super::user_session::Entity")]
    UserSession,
    #[sea_orm(has_many = "super::user_role::Entity")]
    UserRole,
    #[sea_orm(has_many = "super::audit_log::Entity")]
    AuditLog,
}

impl Related<super::user_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroup.def()
    }
}

impl Related<super::user_session::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserSession.def()
    }
}

impl Related<super::audit_log::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuditLog.def()
    }
}

impl Related<super::user_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRole.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
