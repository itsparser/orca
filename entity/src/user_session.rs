//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct UserSession {
    pub id: i32,
    pub user_id: i32,
    pub session_id: String,
    pub session_type: String,
    pub user_agent: String,
    pub email: String,
    pub expires_by: DateTime,
}

impl UserSession {
    pub fn from_active_model(mut am: ActiveModel) -> Self {
        Self {
            id: am.id.take().unwrap(),
            user_id: am.user_id.take().unwrap(),
            session_id: am.session_id.take().unwrap(),
            session_type: am.session_type.take().unwrap(),
            user_agent: am.user_agent.take().unwrap(),
            email: am.email.take().unwrap(),
            expires_by: am.expires_by.take().unwrap(),
        }
    }
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "user_session")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    pub user_id: i32,
    pub session_id: String,
    pub session_type: String,
    pub user_agent: String,
    pub email: String,
    pub expires_by: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user::Entity")]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
